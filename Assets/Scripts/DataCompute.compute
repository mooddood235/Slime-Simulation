#pragma kernel CSMain

struct Agent{
    float2 pos;
    float angle;
};

const float MAXHASH = 4294967295.0;

RWStructuredBuffer<Agent> agents;
RWTexture2D<float4> trailMap;

uint width;
uint height;

float deltaTime;

float speed;
float turnSpeed;
float sensorAngle;
float sensorOffset;

uint hash(uint value){
    value ^= 2747636419u;
    value *= 2654435769u;
    value ^= value >> 16;
    value *= 2654435769u;
    value ^= value >> 16;
    value *= 2654435769u;
    return value;
}

int2 GetSensorPos(float2 pos, float angle, int dir){
    if (dir == -1){
        return pos + float2(cos(angle + sensorAngle), sin(angle + sensorAngle)) * sensorOffset;
    }
    if (dir == 1){
        return pos + float2(cos(angle - sensorAngle), sin(angle - sensorAngle)) * sensorOffset;
    }
    return pos + float2(cos(angle), sin(angle)) * sensorOffset;
}

float GetNewAngle(float flVal, float frVal, float fVal, float2 pos, float angle, uint id){
    if ((fVal < flVal) && (fVal < frVal)){
        if (hash(pos.y * width + pos.x + hash(id.x)) / 4294967295.0 > 0.5){
            return angle + sensorAngle * turnSpeed * deltaTime;
        }
        else{
            return angle - sensorAngle * turnSpeed * deltaTime;
        }
    }
    else if (flVal < frVal){
        return angle - sensorAngle * turnSpeed * deltaTime;
    }
    else if (frVal < flVal){
        return angle + sensorAngle * turnSpeed * deltaTime;
    }
    return angle;
}

[numthreads(1000,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    Agent agent = agents[id.x];
    float2 newPos = agent.pos + float2(cos(agent.angle), sin(agent.angle)) * speed * deltaTime;
    float newAngle;

    if (newPos.x < 0.0 || newPos.x >= width || newPos.y < 0.0 || newPos.y >= height){
        newPos.x = min(width - 0.01, max(0, newPos.x));
        newPos.y = min(height - 0.01, max(0, newPos.y));
        newAngle = (float)hash(newPos.y * width + newPos.x + hash(id.x)) / 4294967295.0 * 2.0 * 3.14159265359;
    }
    else{
        int2 fl = GetSensorPos(newPos, agent.angle, -1);
        int2 fr = GetSensorPos(newPos, agent.angle, 1);
        int2 f = GetSensorPos(newPos, agent.angle, 0);
        newAngle = GetNewAngle(trailMap[fl], trailMap[fr], trailMap[f], newPos, agent.angle, id.x);   
    }
    trailMap[int2(newPos.x, newPos.y)] = 1;

    agent.pos = newPos;
    agent.angle = newAngle;
    agents[id.x] = agent;
}
